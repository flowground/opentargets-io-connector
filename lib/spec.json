{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "http://api.opentargets.io/v3"
        }
    ],
    "info": {
        "contact": {
            "email": "support@targetvalidation.org",
            "name": "Open Targets Platform team"
        },
        "description": "### The Open Targets Platform REST API\n\nThe Open Targets Platform API ('Application Programming Interface')\nallows programmatic retrieval of our data via a set of\n[REST](https://en.wikipedia.org/wiki/Representational_state_transfer)\nservices.\n\nYou can make calls to the latest version of our API using the base URL\n`https://api.opentargets.io/v3/platform`. Please make sure you use `https`\ninstead of the unencrypted `http` calls, which we do not accept.\n\nContinue reading below or [try query in the interactive interface](https://api.opentargets.io/v3/platform/docs/swagger-ui)\n\nNote that we only serve the latest version of the API. If you are interested in querying an\nold version, please [get in touch](mailto:support@targetvalidation.org) so that\nwe can help.\n\nWe list below the methods available for you to query our data directly from the API. These methods will be\nautomatically generated from our Swagger UI. For every request you create, the interface will display a [curl](https://curl.haxx.se/) command\nthat you can copy and paste directly to a shell to obtain the same results without using an internet browser.\n\nCheck our [API blog posts](https://blog.opentargets.org/tag/api), for tutorials and additional\ninformation on how to access of our data programmatically.\n\n### Available Methods\n\nThe available methods can be grouped in four types:\n\n* __public__ - Methods that serve the core set of our data. These are stable and we fully supported them.\n* __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods\nmay change without notice and should be used with caution.\n* __utils__ - Methods to get statistics and technical data about our API.\n\n### Supported formats\n\nThe four methods above are all available via a `GET` request, and will serve outputs as `JSON`.\nAlternative output formats such `xml`, `csv` and `tab` are also available for some of the methods.\nPlease note that alternative output formats are not supported in this interactive page. The response here will always be in `json` format.\n\nIf you have complex queries with large number of parameters, you should\nuse a `POST` request instead of  `GET`. `POST` methods require a body encoded as `json`.\nWhen querying for a specific disease using the latest version of the API, your call would look like the example below:\n\n```sh\ncurl -X POST -d '{\"disease\":[\"EFO_0000253\"]}' --header 'Content-Type: application/json' https://api.opentargets.io/v3/platform/public/evidence/filter\n```\n### How to interpret a response\n\nEach HTTP response will serve data in headers and body.\nThe headers will give you details about your query, such as how long it took to run, and how much usage you have left (See the 'Fair Usage\nand API keys' section below for more details).\n\nIn the body of the response, you will find the data you have requested for in a `json` format. The\n[jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.\n\n```sh\ncurl https://api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq\n```\n\nWe do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API.\nRead more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).\n\nHow can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented?\nPlease [get in touch](mailto:support@targetvalidation.org) and send your suggestions.\n\n### More examples\nCheck our [Getting started tutorial](https://blog.opentargets.org/api-getting-started-1) for more\nexamples on how to use the API and for some code snippets, which can be used to construct more complex queries.\n",
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "Fair usage is enforced with limits to the api calls. Consistently exceeding the fair usage limits will trigger at\nleast a 24 hour ban.\n",
        "title": "Open Targets Platform",
        "version": "3.0.2",
        "x-apisguru-categories": [
            "open_data"
        ],
        "x-logo": {
            "url": "https://api.apis.guru/v2/cache/logo/https_www.targetvalidation.org_imgs_logo_ot_logo_webheader.svg"
        },
        "x-origin": [
            {
                "format": "swagger",
                "url": "http://api.opentargets.io/v3/platform/swagger",
                "version": "2.0"
            }
        ],
        "x-preferred": true,
        "x-providerName": "opentargets.io"
    },
    "tags": [
        {
            "description": "Methods to filter the available evidence.",
            "name": "filter"
        },
        {
            "description": "Methods to get specific evidence.",
            "name": "retrieve"
        },
        {
            "description": "Methods to search for target or diseases.",
            "name": "search"
        },
        {
            "description": "Publicly supported stable API.",
            "name": "public"
        },
        {
            "description": "Unstable API methods. Subject to change without prior notice. Use at your own risk.",
            "name": "private"
        },
        {
            "description": "Utility methods.",
            "name": "utils"
        }
    ],
    "paths": {
        "/platform/docs": {
            "get": {
                "description": "Access api docs as served by Redoc",
                "operationId": "getApiDocs",
                "responses": {
                    "200": {
                        "description": "Redoc API documentation file"
                    }
                },
                "summary": "Browse API documentation",
                "tags": [
                    "private"
                ]
            }
        },
        "/platform/docs/swagger-ui": {
            "get": {
                "description": "Interactive API docs using swagger-ui",
                "operationId": "getApiSwaggerUI",
                "responses": {
                    "200": {
                        "description": "Swagger-UI API documentation file"
                    }
                },
                "summary": "Browse interactive API documentation",
                "tags": [
                    "private"
                ]
            }
        },
        "/platform/private/autocomplete": {
            "get": {
                "description": "Search for the closest term to autocomplete in the search box.\n",
                "operationId": "getAutocomplete",
                "parameters": [
                    {
                        "description": "A full text query.",
                        "in": "query",
                        "name": "q",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Maximum amount of results to return. Defaults to 5.",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Get `autocomplete` objects.",
                "tags": [
                    "private"
                ]
            }
        },
        "/platform/private/besthitsearch": {
            "post": {
                "description": "Fire the search method for multiple strings\n",
                "operationId": "postBestHitSearch",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Find the best hit",
                "tags": [
                    "private"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    },
                    "description": "list of strings to search for",
                    "required": true
                }
            }
        },
        "/platform/private/disease": {
            "post": {
                "description": "Get `disease` objects.\n",
                "operationId": "postDiseaseById",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Find information about a list of diseases",
                "tags": [
                    "private"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": "{\"disease\":[\"disease1\", \"disease2\"],\n\"facets\" = \"true\"}\n",
                                "type": "string"
                            }
                        }
                    },
                    "description": "An EFO identifier.",
                    "required": true
                }
            }
        },
        "/platform/private/disease/{disease}": {
            "get": {
                "description": "Get `disease` objects.\n",
                "operationId": "getDiseaseById",
                "parameters": [
                    {
                        "description": "An EFO identifier.",
                        "in": "path",
                        "name": "disease",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Find information about a disease",
                "tags": [
                    "private"
                ]
            }
        },
        "/platform/private/eco/{ECO_ID}": {
            "get": {
                "description": "Get `ECO` objects.\n",
                "operationId": "getECObyID",
                "parameters": [
                    {
                        "description": "An [evidence code ontology](http://www.ebi.ac.uk/ols/v2/browse.do?ontName=ECO) ID.",
                        "in": "path",
                        "name": "ECO_ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Get evidence code by ID",
                "tags": [
                    "private"
                ]
            }
        },
        "/platform/private/enrichment/targets": {
            "post": {
                "description": "Returns an enrichment analysis for a list of targets passed in the body\n",
                "operationId": "postEnrichmentTarget",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Enrichment analysis",
                "tags": [
                    "private"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": "{\"target\" : [\"ENSG00000001\", \"ENSG00000002\"],\n \"pvalue\" : 0.001,\n \"size\" : 20}\n",
                                "type": "string"
                            }
                        }
                    },
                    "description": "IDs of the targets to do the enrichment analysis for.",
                    "required": true
                }
            }
        },
        "/platform/private/quicksearch": {
            "get": {
                "description": "Get `search-result` objects. Enables search bar functionality.\n",
                "operationId": "getQuickSearch",
                "parameters": [
                    {
                        "description": "A full text query.",
                        "in": "query",
                        "name": "q",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Maximum amount of results to return. Defaults to 5.",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Search most relevant results",
                "tags": [
                    "private"
                ]
            }
        },
        "/platform/private/relation": {
            "post": {
                "description": "Get `relation` objects.\n",
                "operationId": "postRelation",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Find related entities",
                "tags": [
                    "private"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": "{\"subject\":[\"gene1\", \"gene2\"]}\n",
                                "type": "string"
                            }
                        }
                    },
                    "description": "An Ensembl gene identifier.",
                    "required": true
                }
            }
        },
        "/platform/private/relation/disease/{disease}": {
            "get": {
                "description": "Get `relation` objects starting from diseases.\n",
                "operationId": "getRelationByEFOID",
                "parameters": [
                    {
                        "description": "An EFO gene identifier.",
                        "in": "path",
                        "name": "disease",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Find related entities by disease",
                "tags": [
                    "private"
                ]
            }
        },
        "/platform/private/relation/target/{target}": {
            "get": {
                "description": "Get `relation` objects starting from diseases.\n",
                "operationId": "getRelationByENSGID",
                "parameters": [
                    {
                        "description": "An Ensembl gene identifier.",
                        "in": "path",
                        "name": "target",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Find related entities by target",
                "tags": [
                    "private"
                ]
            }
        },
        "/platform/private/target": {
            "post": {
                "description": "Get `target` objects. Used for the target profile page.\n",
                "operationId": "postTargetByENSGID",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Find information about a list of targets",
                "tags": [
                    "private"
                ],
                "x-code-samples": [
                    {
                        "lang": "Python",
                        "source": "import requests\nr = requests.get('http://api.opentargets.io/v3/platform/private/target/ENSG00000064687')\nfor ph in r.json()['mouse_phenotypes'][0]['phenotypes']:\n        try:\n            for link in ph['genotype_phenotype']:\n                print(\n                    link['mp_identifier'],\n                    'https://europepmc.org/search?query=EXT_ID:'+link['pmid'],\n                    link['mp_label'],\n                    sep=\"\\t\")\n        except KeyError:\n            pass\n"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": "{\"target\":[\"target1\", \"target2\"],\n\"facets\" = \"true\"}\n",
                                "type": "string"
                            }
                        }
                    },
                    "description": "An Ensembl gene identifier.",
                    "required": true
                }
            }
        },
        "/platform/private/target/expression": {
            "get": {
                "description": "Get `gene-expression` objects.\n",
                "operationId": "getTargetExpressionByENSGID",
                "parameters": [
                    {
                        "description": "An Ensembl gene identifier.",
                        "in": "query",
                        "name": "gene",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Query expression levels",
                "tags": [
                    "private"
                ]
            },
            "post": {
                "description": "Get `gene-expression` objects.\n",
                "operationId": "postTargetExpressionByENSGID",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Batch query expression levels",
                "tags": [
                    "private"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": "{\"gene\":[\"gene1\", \"gene2\"]}\n",
                                "type": "string"
                            }
                        }
                    },
                    "description": "An Ensembl gene identifier.",
                    "required": true
                }
            }
        },
        "/platform/private/target/{target}": {
            "get": {
                "description": "Get `target` objects.\n",
                "operationId": "getTargetByENSGID",
                "parameters": [
                    {
                        "description": "An Ensembl gene ID for the target of interest.",
                        "in": "path",
                        "name": "target",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Find information about a target",
                "tags": [
                    "private"
                ]
            }
        },
        "/platform/public/association": {
            "get": {
                "description": "Once we integrate all evidence connecting a target to a specific disease, we\n compute an association score by the means of an harmonic sum. This *association score* provides\n an indication of how strong the evidence behind each connection is and can be\n used to rank genes in order of likelihood as drug targets.\n The association ID is constructed by using the Ensembl ID of the gene and the\n EFO ID for the disease (e.g. ENSG00000073756-EFO_0003767).\n The method returns an association object, which contains the data and summary\n on each evidence type included in the calculation of the score, as well as the score itself.\n",
                "operationId": "getAssociationById",
                "parameters": [
                    {
                        "description": "An association ID usually in the form of `TARGET_ID-DISEASE_ID`.",
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Get association by id",
                "tags": [
                    "public",
                    "retrieve"
                ]
            }
        },
        "/platform/public/association/filter": {
            "get": {
                "description": "More complex queries for associations scores and objects can be done using\nthis method, which allows to sort in different order, restrict to a specific class\nof diseases or targets, as well as filtering results by score and associated pathways.\n",
                "operationId": "getAssociationFilter",
                "parameters": [
                    {
                        "description": "A target identifier listed as target.id.",
                        "in": "query",
                        "name": "target",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "An EFO code listed as disease.id.",
                        "in": "query",
                        "name": "disease",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "An EFO code of a therapeutic area.",
                        "in": "query",
                        "name": "therapeutic_area",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Data source to consider.",
                        "in": "query",
                        "name": "datasource",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Data type to consider.",
                        "in": "query",
                        "name": "datatype",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A Reactome pathway identifier (returning only those targets linked to the specified pathway).",
                        "in": "query",
                        "name": "pathway",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A ChEMBL target class identifier (returning only those targets belonging to the specified class).",
                        "in": "query",
                        "name": "target_class",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A UniProt keyword (meaning all the targets linked to that keyword).",
                        "in": "query",
                        "name": "uniprotkw",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.",
                        "in": "query",
                        "name": "direct",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.",
                        "in": "query",
                        "name": "datastructure",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Fields you want to retrieve. This will get priority over the data structure requested.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Returns facets",
                        "in": "query",
                        "name": "facets",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "description": "Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.",
                        "in": "query",
                        "name": "scorevalue_min",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "default": 0
                        }
                    },
                    {
                        "description": "Filter by maximum score value.",
                        "in": "query",
                        "name": "scorevalue_max",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "description": "Score types to apply the score value min and max filters. The default is `overall`.",
                        "in": "query",
                        "name": "scorevalue_types",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Maximum amount of results to return. Defaults to 10, max is 10000.",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "integer"
                        }
                    },
                    {
                        "description": "How many initial results should be skipped. Defaults to 0.",
                        "in": "query",
                        "name": "from",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "integer"
                        }
                    },
                    {
                        "description": "Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.",
                        "in": "query",
                        "name": "format",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending\norder e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as\n'datasources.gwas'. Supports multiple entries.\n",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Restrict the filtered results to those matching the passed string. The matching is done with a\nphrase match prefix.\n",
                        "in": "query",
                        "name": "search",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Filter available associations",
                "tags": [
                    "public",
                    "filter"
                ],
                "x-code-samples": [
                    {
                        "lang": "httpie",
                        "source": "http https://www.targetvalidation.org/api/latest/public/association/filter target==ENSG00000167207 disease==EFO_0003767\n"
                    }
                ]
            },
            "post": {
                "description": "Complex queries and filters for association objects can also be submitted using a JSON\nobject and the equivalent POST method.\n",
                "operationId": "postAssociationFilter",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Batch query available associations",
                "tags": [
                    "public",
                    "filter"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": "{\"target\":[\"target1\", \"target2\"]}\n",
                                "type": "string"
                            }
                        }
                    },
                    "description": "Filters to apply when retrieving association objects.",
                    "required": true
                }
            }
        },
        "/platform/public/evidence": {
            "get": {
                "description": "We call **evidence** a unit of data that support a connection between a target and a disease.\nThe Open Targets Platform integrates multiple types of evidence including genetic associations,\nsomatic mutations, RNA expression and target-disease associations mined from the literature.\nThis method allows you to retrieve a single evidence item or a list of pieces of evidence by using their\ntargetvalidation.org ID.\n\nEvidence IDs are unique within each data release (e.g. `8ed3d7568a8c6cac9c95cfb869bac762` for release 1.2).\nYou can obtain a list of evidence and their IDs from other API calls such as [/public/evidence/filter](#!/public/get_public_evidence_filter).\n\n**Please note** that a specific evidence ID may change between data releases. We can not guarantee that a specific evidence ID will refer to the same piece of evidence connecting a target and its diseases.\n",
                "operationId": "getEvidenceById",
                "parameters": [
                    {
                        "description": "Internal unique ID of the evidence string to retrieve.",
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Get evidence by ID",
                "tags": [
                    "public",
                    "retrieve"
                ]
            },
            "post": {
                "description": "This is the POST version of [/public/evidence](#!/public/get_public_evidence).\nIt allows to query for a list of evidence strings encoded in a `json` object to be passed in the body.\n",
                "operationId": "postEvidenceById",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Get evidence for a list of IDs",
                "tags": [
                    "public",
                    "retrieve"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": "{\"id\":[\"id1\", \"id2\"]}\n",
                                "type": "string"
                            }
                        }
                    },
                    "description": "IDs of the evidence string to retrieve.",
                    "required": true
                }
            }
        },
        "/platform/public/evidence/filter": {
            "get": {
                "description": "The filter method allows to retrieve the specific data that supports a connection between targets and diseases.\nFilters can be used to restrict the results by source and type of data,\nor limit results to targets which are part of a particular pathway.\nMinimum and maximum scores can be specified as well as the type of evidence linking target and disease.\n**Note** that multiple genes and diseases can be specified in the same request.\n",
                "operationId": "getEvidenceFilter",
                "parameters": [
                    {
                        "description": "A target identifier listed as target.id.",
                        "in": "query",
                        "name": "target",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "An EFO code listed as disease.id.",
                        "in": "query",
                        "name": "disease",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Data source to consider.",
                        "in": "query",
                        "name": "data source",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Data type to consider.",
                        "in": "query",
                        "name": "datatype",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A pathway identifier (meaning all the targets linked to that pathway).",
                        "in": "query",
                        "name": "pathway",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A UniProt keyword (meaning all the targets linked to that keyword).",
                        "in": "query",
                        "name": "uniprotkw",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.",
                        "in": "query",
                        "name": "datastructure",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The fields you want to retrieve. This will get priority over the data structure requested.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.",
                        "in": "query",
                        "name": "scorevalue_min",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "default": 0
                        }
                    },
                    {
                        "description": "Filter by maximum score value.",
                        "in": "query",
                        "name": "scorevalue_max",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "description": "Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending\norder e.g. '~scores.association_score'. It supports multiple entries.\n",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Maximum amount of results to return. Defaults to 10, max is 10000.",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "integer"
                        }
                    },
                    {
                        "description": "How many initial results should be skipped. Defaults to 0.",
                        "in": "query",
                        "name": "from",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "integer"
                        }
                    },
                    {
                        "description": "Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.",
                        "in": "query",
                        "name": "format",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Filter available evidence",
                "tags": [
                    "public",
                    "filter"
                ],
                "x-code-samples": [
                    {
                        "lang": "httpie",
                        "source": "http https://www.targetvalidation.org/api/latest/public/evidence/filter target==ENSG00000167207 disease==EFO_0003767 datastructure==simple\n"
                    }
                ]
            },
            "post": {
                "description": "POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter).\nFilters can be specified as part of a `json` object in the body, simplifying the submission of queries.\n",
                "operationId": "postEvidenceFilter",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Batch filter available evidence",
                "tags": [
                    "public",
                    "filter"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": "{\"target\":[\"ENSG00000094755\", \"ENSG00000167207\"], \"disease\":[\"EFO_0003767\"]}\n",
                                "type": "string"
                            }
                        }
                    },
                    "description": "Filters to apply when retrieving evidence string objects.",
                    "required": true
                }
            }
        },
        "/platform/public/search": {
            "get": {
                "description": "This method allows you to look for gene or diseases of interest using a free text search,\nreplicating the functionality of the search box on our homepage. It should be used to identify\nthe best match for a disease or target of interest, rather than gathering a specific set of evidence.\n",
                "operationId": "getSearch",
                "parameters": [
                    {
                        "description": "A full text query.",
                        "in": "query",
                        "name": "q",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Maximum amount of results to return. Defaults to 10, max is 10000.",
                        "in": "query",
                        "name": "size",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "How many initial results should be skipped. Defaults to 0.",
                        "in": "query",
                        "name": "from",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Restrict the search to the type requested. Eg. `target` or `disease`.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Search for a disease or a target",
                "tags": [
                    "public",
                    "search"
                ],
                "x-code-samples": [
                    {
                        "lang": "httpie",
                        "source": "http https://api.opentargets.io/api/latest/public/search q==NOD2 size==1 filter==target\n"
                    },
                    {
                        "lang": "Python",
                        "source": "import requests\nfrom pprint import pprint\nr = requests.get('https://www.targetvalidation.org/api/latest/public/search',\n                params={\"q\":\"NOD2\",\"size\":1})\npprint(r.json())\n"
                    }
                ]
            }
        },
        "/platform/public/utils/metrics": {
            "get": {
                "description": "Returns the metrics about associations and evidences, divided by datasource, genes and so on.\n",
                "operationId": "getDataMetrics",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Get metrics about the current data release",
                "tags": [
                    "public",
                    "utils"
                ],
                "x-code-samples": [
                    {
                        "lang": "Python",
                        "source": "import requests\nr = requests.get('https://www.targetvalidation.com/api/latest/public/metrics')\nassert r.status_code == 200\nassert r.headers['content-type'] == 'application/json'\nprint(r.json())"
                    }
                ]
            }
        },
        "/platform/public/utils/ping": {
            "get": {
                "description": "Check if the API is up\n",
                "operationId": "getPing",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Ping service",
                "tags": [
                    "public",
                    "utils"
                ]
            }
        },
        "/platform/public/utils/stats": {
            "get": {
                "description": "Returns the number of associations and evidences, divided by datasource.\n",
                "operationId": "getDataStats",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Get statistics about the current data release",
                "tags": [
                    "public",
                    "utils"
                ],
                "x-code-samples": [
                    {
                        "lang": "Python",
                        "source": "import requests\nr = requests.get('https://www.targetvalidation.com/api/latest/public/stats')\nassert r.status_code == 200\nassert r.headers['content-type'] == 'application/json'\nprint(r.json())\n"
                    }
                ]
            }
        },
        "/platform/public/utils/version": {
            "get": {
                "description": "Returns current API version.\n",
                "operationId": "getVersion",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                },
                "summary": "Get API version",
                "tags": [
                    "public",
                    "utils"
                ],
                "x-code-samples": [
                    {
                        "lang": "Shell",
                        "source": "curl -X GET https://www.targetvalidation.org/api/latest/public/utils/version\n"
                    }
                ]
            }
        },
        "/platform/swagger": {
            "get": {
                "description": "Get swagger.yaml specs for the API",
                "operationId": "getSwagger",
                "responses": {
                    "200": {
                        "description": "Swagger.yaml file"
                    }
                },
                "summary": "Get OpenAPI schema",
                "tags": [
                    "private"
                ]
            }
        }
    },
    "x-tagGroups": [
        {
            "name": "Stable",
            "tags": [
                "filter",
                "retrieve",
                "search"
            ]
        },
        {
            "name": "Utilities",
            "tags": [
                "utils",
                "private"
            ]
        },
        {
            "name": "All",
            "tags": [
                "public",
                "private"
            ]
        }
    ]
}